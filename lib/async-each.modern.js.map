{"version":3,"file":"async-each.modern.js","sources":["../src/index.ts"],"sourcesContent":["export type TAsyncEachStatus<T, R> = {\n  progress: number;\n  total: number;\n  percent: number;\n  item: T;\n  index: number;\n  result: R;\n};\n\ntype TCallbackFn<T, R> = (\n  item: T,\n  index: number,\n  items: Array<T>\n) => Promise<R> | R;\n\nexport type TAsyncEachStatusCallbackFn<T, R> = (\n  status: TAsyncEachStatus<T, R>\n) => void;\n\nfunction asyncEach<T, R>(\n  items: Array<T>,\n  callbackFn: TCallbackFn<T, R>,\n  statusCallbackFn: TAsyncEachStatusCallbackFn<T, R> = () => {}\n): Promise<Array<R>> {\n  let progress: number = 0;\n  const total: number = items.length;\n\n  const promises = items.map((item: T, index: number, items: Array<T>) => {\n    return new Promise<R>(async (resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          const result = await callbackFn(item, index, items);\n\n          resolve(result);\n\n          statusCallbackFn({\n            progress: progress++,\n            total,\n            percent: Math.floor((100 * progress) / total),\n            item,\n            index,\n            result,\n          });\n        } catch (err) {\n          reject(err);\n        }\n      }, 0);\n    });\n  });\n\n  // This will reject if any promise fails.\n  return Promise.all(promises);\n}\n\nexport default asyncEach;\n"],"names":["asyncEach","items","callbackFn","statusCallbackFn","progress","total","length","promises","map","item","index","Promise","async","resolve","reject","setTimeout","result","percent","Math","floor","err","all"],"mappings":"AAmBA,SAASA,EACPC,EACAC,EACAC,EAAqDA,UAErD,IAAIC,EAAmB,EACvB,MAAMC,EAAgBJ,EAAMK,OAEtBC,EAAWN,EAAMO,IAAI,CAACC,EAASC,EAAeT,IAC3C,IAAIU,QAAWC,MAAOC,EAASC,KACpCC,WAAWH,UACT,IACE,MAAMI,QAAed,EAAWO,EAAMC,EAAOT,GAE7CY,EAAQG,GAERb,EAAiB,CACfC,SAAUA,IACVC,QACAY,QAASC,KAAKC,MAAO,IAAMf,EAAYC,GACvCI,OACAC,QACAM,UAEH,CAAC,MAAOI,GACPN,EAAOM,EACR,GACA,EAAC,IAKR,OAAOT,QAAQU,IAAId,EACrB"}