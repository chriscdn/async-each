{"version":3,"file":"async-each.module.js","sources":["../src/index.ts"],"sourcesContent":["import Semaphore from \"@chriscdn/promise-semaphore\";\n\nexport type TAsyncEachStatus<T, R> = {\n  progress: number;\n  total: number;\n  percent: number;\n  item: T;\n  index: number;\n  result: R;\n};\n\ntype TCallbackFn<T, R> = (\n  item: T,\n  index: number,\n  items: Array<T>,\n) => Promise<R> | R;\n\ntype Options = {\n  rateLimit?: number;\n};\n\nexport type TAsyncEachStatusCallbackFn<T, R> = (\n  status: TAsyncEachStatus<T, R>,\n) => void;\n\nconst asyncEach = <T, R>(\n  items: Array<T>,\n  callbackFn: TCallbackFn<T, R>,\n  statusCallbackFn: TAsyncEachStatusCallbackFn<T, R> = () => {},\n  options: Options = {},\n): Promise<Array<R>> => {\n  let progress: number = 0;\n  const total: number = items.length;\n\n  const rateLimit = options.rateLimit ?? 0;\n  const semaphore = rateLimit ? new Semaphore(rateLimit) : null;\n\n  const promises = items.map((item: T, index: number, items: Array<T>) => {\n    return new Promise<R>(async (resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          await semaphore?.acquire();\n\n          const result = await callbackFn(item, index, items);\n\n          resolve(result);\n\n          statusCallbackFn({\n            progress: progress++,\n            total,\n            percent: Math.floor((100 * progress) / total),\n            item,\n            index,\n            result,\n          });\n        } catch (err) {\n          reject(err);\n        } finally {\n          semaphore?.release();\n        }\n      }, 1);\n    });\n  });\n\n  // This will reject if any promise fails.\n  return Promise.all(promises);\n};\n\nexport default asyncEach;\n"],"names":["asyncEach","items","callbackFn","statusCallbackFn","options","_options$rateLimit","progress","total","length","rateLimit","semaphore","Semaphore","promises","map","item","index","Promise","resolve","reject","setTimeout","_temp","acquire","then","result","percent","Math","floor","_catch","err","_finallyRethrows","_wasThrown","_result","release","e","all"],"mappings":"2CAyBM,IAAAA,EAAY,SAChBC,EACAC,EACAC,EACAC,OACqBC,OAFrBF,IAAAA,IAAAA,EAAqD,WAAQ,QAC7DC,IAAAA,IAAAA,EAAmB,IAEnB,IAAIE,EAAmB,EACjBC,EAAgBN,EAAMO,OAEtBC,EAA6B,OAApBJ,EAAGD,EAAQK,WAASJ,EAAI,EACjCK,EAAYD,EAAY,IAAIE,EAAUF,GAAa,KAEnDG,EAAWX,EAAMY,IAAI,SAACC,EAASC,EAAed,GAClD,WAAWe,iBAAkBC,EAASC,GAAM,IAsBpC,OArBNC,0BAAsBC,IAAAA,kDAChBJ,QAAAC,QACIP,MAAAA,OAAAA,EAAAA,EAAWW,WAASC,KAAAN,WAAAA,OAAAA,QAAAC,QAELf,EAAWY,EAAMC,EAAOd,IAAMqB,KAA7CC,SAAAA,GAENN,EAAQM,GAERpB,EAAiB,CACfG,SAAUA,IACVC,MAAAA,EACAiB,QAASC,KAAKC,MAAO,IAAMpB,EAAYC,GACvCO,KAAAA,EACAC,MAAAA,EACAQ,OAAAA,GACC,8DAfeI,CAChB,EAeH,SAAQC,GACPV,EAAOU,EACR,4FAlBmBC,CAAA,EAkBnBC,SAAAA,EAAAC,GACsB,GAAZ,MAATrB,GAAAA,EAAWsB,UAAUF,QAAAC,EAAA,OAAAA,CAAA,GAAA,OAAAf,QAAAC,QAAAG,GAAAA,EAAAE,KAAAF,EAAAE,KAEzB,WAAA,QAAA,EAAA,CAAC,MAAAW,GAAA,OAAAjB,QAAAE,OAAAe,EAAA,CAAA,EAAE,GAAGjB,QAAAC,SACR,CAAC,MAAAgB,GAAAjB,OAAAA,QAAAE,OAAAe,EACH,CAAA,EAAA,GAGA,OAAOjB,QAAQkB,IAAItB,EACrB"}